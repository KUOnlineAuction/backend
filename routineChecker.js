const cron = require("node-cron");
const dotenv = require("dotenv");
const mongoose = require("mongoose");
const Auction = require("./models/auctionModel");
const { BillingInfo } = require("./models/billingInfoModel");
const Report = require("./models/reportModel");

dotenv.config({ path: "./config.env" });
const DB = process.env.DATABASE.replace(
  "<PASSWORD>",
  process.env.DATABASE_PASSWORD
);

const autogeneratedUserID = "632be28f8d9b6b2337772296";

mongoose
  .connect(DB, {
    useNewUrlParser: true,
    useCreateIndex: true,
    useFindAndModify: false,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("DB connection successful");
  });

// Routine checking for Auctions ending (Every start of a minute)
cron.schedule("* * * * *", async () => {
  const filter = {
    endDate: { $lt: Date.now() },
    auctionStatus: "bidding",
  };
  const update = {
    auctionStatus: "waiting",
  };

  const auction = await Auction.updateMany(filter, update);
  console.log(`Found ${auction.n} documents, updated ${auction.nModified}`);
  // console.log(auction)
});

// Routine checking for delivering deadline (Every day at midnight)
cron.schedule("0 0 * * *", async () => {
  // cron.schedule('*/5 * * * * *', async () => {
  const filter = {
    deliverDeadline: { $lt: Date.now() },
    billingInfoStatus: "waitingForShipping",
    deliverDeadlineBroken: false,
  };
  const update = {
    deliverDeadlineBroken: true,
  };
  const billingsFound = await BillingInfo.aggregate([
    {
      $match: {
        deliverDeadline: { $lt: new Date() },
        billingInfoStatus: "waitingForShipping",
        deliverDeadlineBroken: false,
      },
    },
    {
      $lookup: {
        from: "auctions",
        localField: "auctionID",
        foreignField: "_id",
        as: "involvedAuction",
      },
    },
    {
      $set: {
        auctioneerID: { $arrayElemAt: ["$involvedAuction.auctioneerID", 0] },
      },
    },
    {
      $project: {
        auctioneerID: 1,
        _id: 0,
      },
    },
  ]);
  for (let el of billingsFound) {
    let report = {
      reporterID: autogeneratedUserID,
      reportedID: el.auctioneerID,
      description:
        "[Autogenerated Report] This user has past the deadline of sending the delivery info.",
    };
    const newReport = await Report.create(report);
  }
  const billingsUpdate = await BillingInfo.updateMany(filter, update);
  console.log(
    `Found ${billingsUpdate.n} auctions past deliver deadline, Generated ${billingsUpdate.n} reports`
  );
});

// Routine checking for confirm item recieve deadline (Every day at midnight)
cron.schedule("0 0 * * *", async () => {
  const filter = {
    confirmItemRecieveDeadline: { $lt: new Date() },
    billingInfoStatus: "waitingAdminPayment",
  };
  const update = {
    billingInfoStatus: completed,
  };
  const billingsUpdate = await BillingInfo.updateMany(filter, update);
  console.log(
    `Found ${billingsUpdate.n} auctions past item recieved confirmation deadline, Auto completed ${billingsUpdate.n} auctions`
  );
});
